/* 
Eamon Lightning
eamon_lightning@student.uml.edu
Sound Recording Technology major; Computer Science minor.
Created on November 29, 2014

This javascript file is part of a single page web application that accepts parameters from a user 
via an html form and uses said parameters to construct a multiplication table 
dynamically using javascript. Several tables can be generated and exist 
simultaneously on the page. Through the use of the jQuery UI Tabs Widget, 
each table is displayed within its own tab.

This file is responsible for all html form validation, dynamic construction
of the multiplication tables, and tab maintenance. 
*/

/* Ensures that this file isn't executed until after the content
of the html file is loaded. */
$(document).ready(function() { 

  /* num_tabs is used as a counter to keep track of how many 
  tabs have been generated. */
  var num_tabs = 1;

  /* This validate function is used to check if the input values 
  entered by the user obey to necessary rules to generate a table.
  If something is invalid, an error message is printed. If there are
  no errors, then a table may be generated by clicking the submit button. */
  $("form").validate({
    rules: {

      /* Sets the rule that the "min" feilds must be less than or equal
      to the "max" feilds, and likewise the "max" feilds must be greater
      than or equal to the "min" feilds. "greaterThan" and "lessThan" are
      both customized methods whose definition can be found below. */
      rowmin: {
        lessThan: "#rowmax"
      },
      rowmax: {
        greaterThan: "#rowmin"
      },
      colmin: {
        lessThan: "#colmax"
      },
      colmax: {
        greaterThan: "#colmin"
      }
    },

    /* If either "min" feild fails to be less than or equal to its respective
    "max" feild, the lessThan error message is displayed. Likewise If either 
    "max" feild fails to be greater than or equal to its respective
    "min" feild, the greaterThan error message is displayed. */
    messages: {
      rowmin: {
        lessThan: "Row Min must be less than or equal to Row Max."
      },
      rowmax: {
        greaterThan: "Row Max must be greater than or equal to Row Min."
      },
      colmin: {
        lessThan: "Col Min must be less than or equal to Col Max."
      },
      colmax: {
        greaterThan: "Col Max must be greater than or equal to Col Min."
      }
    }
  });

  /* A short cut for adding the same class rules to each input feild. */ 
  $.validator.addClassRules({
    input: {
      number: true,
      required: true
    }
  });

  /* A short cut for displaying the same error message for each class rule 
  if a non-numeric entry is made. */
  $.extend($.validator.messages, {
    number: "Please enter an integer."
  });

/* code based on the following post: http://stackoverflow.com/questions/14347177/how-can-i-validate-that-the-max-field-is-greater-than-the-min-field
This method checks to see whether or not the value of the class (input element) 
that called it is greater than its corresponding "min" feild. If it isn't,
the appropriate error message is printed. */
  $.validator.addMethod("greaterThan", 
    function (value, element, param) {
      var $min = $(param);
      if (this.settings.onfocusout) {
        $min.off(".validate-greaterThan").on("blur.validate-greaterThan", 
        function () {
          $(element).valid();
        });
      }
      return parseInt(value) >= parseInt($min.val());
    }, "Max must be greater than or equal to Min");

/* This method checks to see whether or not the value of the class (input element) 
that called it is less than its corresponding "max" feild. If it isn't,
the appropriate error message is printed. */
  $.validator.addMethod("lessThan",
    function (value, element, param) {
      var $max = $(param);
      if (this.settings.onfocusout) {
        $max.off(".validate-lessThan").on("blur.validate-lessThan", 
        function () {
          $(element).valid();
        });
      }
      return parseInt(value) <= parseInt($max.val());
  }, "Min must be less than or equal to Max");


  /* This event listener is responsible for generating a multiplication
  table, adding it to the DOM (in the tabs_content div), and adding a 
  tab header to the DOM (in the tabs_list div), if the form is valid. */
  $("form").submit(function() {


    $("#tabs").tabs();

    /* Checks if the form is valid. If not, the function returns. */
    if (! $(form).valid()) {return;}

    /* Converts user input from strings to numbers. */
    var rowmin = Number(this.rowmin.value);
    var rowmax = Number(this.rowmax.value);
    var colmin = Number(this.colmin.value);
    var colmax = Number(this.colmax.value);
    
    var topRow = [];
    var leftCol = [];
    var table;
    var i;
    var j;

    /* Constructs two arrays. One holds the multipliers, the other
    holds the multiplicands. */
    for (i = colmin; i <= colmax; i++) { topRow[topRow.length] = i; }
    for (i = rowmin; i <= rowmax; i++) { leftCol[leftCol.length] = i; }

    /* Constructs the first row, which are table headers. The <th>
    elements are given the class "frame" so that they may be styled
    in a way to differentiate them from the body of the table. */
    table = "<table> <tr> <th> </th>";
    for (i = 0; i < topRow.length; i++) {
      table += "<th class=\"frame\">" + topRow[i] + "</th>";
    }
    table += "</tr>"

    /* Constructs the body of the table. The first <td> elements in
    each row are given the class "frame" so that they may be styled
    in a way to differentiate them from the body of the table. All
    other <td> elements are given the class "cell", so that the mouseover
    event below works only the body of the table- not the leftmost column.
    This nested loop multiplies each number in left column by each number
    in the top row whose result is placed in a <td> element. */
    for (i = 0; i < leftCol.length; i++) {
      table += "<tr>" + "<td class=\"frame\">" + leftCol[i] + "</td>";
      for (j = 0; j < topRow.length; j++) {
        table += "<td class=\"cell\">" + (topRow[j] * leftCol[i]) + "</td>";
      }
      table += "</tr>";
    }

    table += "</table>";

    //$("#start_reference").append("<li><a href='#tab" + num_tabs + "'>" + '[' + rowmin + ',' + rowmax + ']' + ' , ' + '[' + colmin + ',' + colmax + ']' +  "</a><span class=\"ui-icon ui-icon-circle-close ui-closable-tab\"></span></li>");
    
    /* This code appends a tab header to the tabs_list ul. The tab header is comprised an li element, 
    an a element that is used to load the multiplication table by linking the id of the table to its href 
    value, and a span element that inserts a close-icon to the tab, which allows
    for tabs to be closed individually. */
    $("#tabs_list").append("<li class=\"tab_heading\"><a href='#tab" + num_tabs + "'>" + "[" + rowmin.toString() + "," + rowmax.toString() + "]" + " , " + "[" + colmin.toString() + "," + colmax.toString() + "]" +  "</a><span class=\"ui-icon ui-icon-circle-close\"></span></li>");
    
    /* This code appends a multiplication table to the tabs_content div. Its id value matches the 
    href value of the tab header generated in the previous line. */ 
    $("#tabs_content").append("<div class=\"table\" id='tab" + num_tabs + "'>" + table + "</div>");
  
    num_tabs++;
    $("#tabs").tabs("refresh");

    // code based on the following post: http://stackoverflow.com/questions/14357614/add-close-button-to-jquery-ui-tabs
    /* Closes the corresponding tab header and the multiplication table the a element's
    href value was linked to. */
    $("span.ui-icon-circle-close").click(function() {
      var panelId = $(this).closest("li").remove().attr("aria-controls");
      $("#" + panelId).remove();
      $("tabs").tabs("refresh");
    });

  });

  /* This code closes all open tabs. It removes all tab headers, and all
  multiplication tables. */
  $("#remove_tabs").click(function() {
    $(".tab_heading").remove();
    $(".table").remove();
    num_tabs = 1;
  });
    
 
  /* This click event is used to display which row and column
  a product belongs to. The fuction finds the first child of the parent 
  of the <td> element being "clicked". This first child is the row
  in which the product belongs. Then, using simple algebra, I deduce which 
  column the product belongs to and print the enitre expression to the
  screen. This is especially helpful if the user builds a very large table
  and can no longer see the multipliers or multiplicands of the table. */
  $(document).on("click", ".cell", function() {
    var rowElements = this.parentNode.getElementsByTagName("td");
    var rowNum = rowElements[0].innerHTML;
    var colNum = this.innerHTML / rowNum;
    var calcMessage = "<p>" + rowNum + " x " + colNum + " = " + this.innerHTML + "</p>";
    
    /* calcMessage is then placed inside the calc div, which is displayed
    near the cursor, whose position is determined by event.pageX and event.pageY. */
    $("#calc").html(calcMessage);
    var x = event.pageX;
    var y = event.pageY;
    x += 10;
    //y -= 10;

    $("#calc").css({
      "position": "absolute",
      "padding": 5,
      "border-radius": 6,
      "z-index" : 10,
      "top": y,
      "left": x,
      "background-color": "yellow"
    }).fadeToggle(2000); 
  }); 

});